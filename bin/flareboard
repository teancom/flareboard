#!/usr/bin/env ruby
# @author David Bishop

require 'net/http'
if RUBY_VERSION < '1.9'
  require 'net/https'
end
require 'json'
require 'optparse'
require 'yaml'

# Rather than dump out a free-form string, on errors dump out something that
# the status board app can read in and display
#
# @param error [String] Short description of the problem
# @param detail [String] Longer description or specific error code
# @return [nil]
def exit_json(error, detail)
  # return the error in json form
  sperror = {
    'error' => {
      'message' => error,
      'detail'  => detail
    }
  }
  STDERR.puts error, detail
  puts sperror.to_json
  exit 1
end

# Take the integer that CloudFlare uses and return a description in english
#
# @param interval [Integer] Integer needed by Cloudflare API
# @return [String] Description in english
def name_interval(interval)
  title = {
    20 => 'Last Month',
    30 => 'Last Week',
    40 => 'Yesterday',
    100 => '24 Hours Ago',
    110 => '12 Hours Ago',
    120 => '6 Hours Ago'
  }

  # hash.fetch will return the second parameter if the key doesn't exist
  title.fetch(interval, 'Invalid interval')
end

# ~~~~~ CONFIG BEGIN ~~~~~

options = {
  :title    => 'Cloudflare - Pageviews',
  :token    => 'XXXXXX',
  :email    => 'user@example.com',
  :interval => 40,
  :graph    => 'bar',
  :sites    => [
    { :title => 'Should I Use That In Prod',
      :url => 'shouldiusethatinprod.com',
      :color => 'red'
    },
    { :title => "It's Not Rocket Science",
      :url => 'itsnotrocketscience.info',
      :color => 'purple'
    }
  ]
}

# YOU SHOULD NOT NEED TO EDIT ANYTHING BELOW HERE
# IF YOU DO, PLEASE OPEN A BUG REPORT AT http://github.com/teancom/flareboard
# ~~~~~ CONFIG END ~~~~~

# The config file
CONFIG_FILE = File.join(ENV['HOME'], '.flareboard.rc')
if File.exist? CONFIG_FILE
  config_options = YAML.load_file(CONFIG_FILE)
  options.merge!(config_options)
end

# The name of this program
EXE_NAME = File.basename($PROGRAM_NAME)
# @todo Add support for graph type
option_parser = OptionParser.new do |opts|
  opts.on('-f FILE',
          '--file',
          'Where to write the JSON output',
          'Defaults to STDOUT'
         ) do |file|
    options[:file] = file
  end
  opts.on('-t TOKEN',
          '--token',
          'Your CloudFlare API token'
         ) do |token|
    options[:token] = token
  end
  opts.on('-e EMAIL',
          '--email',
          'Your CloudFlare email address'
         ) do |email|
    options[:email] = email
  end
  opts.on('-i INTERVAL',
          '--interval',
          Integer,
          'CloudFlare history interval',
          'Defaults to 40'
         ) do |interval|
    options[:interval] = interval
  end
  opts.on('--title TITLE',
          'Title of the status board',
          "Defaults to 'Cloudflare - Pageviews'"
         ) do |title|
    options[:title] = title
  end
# opts.on('--graph GRAPH',
#         'The type of graph - bar or line',
#         'Defaults to bar'
#        ) do |graph|
#   options[:graph] = graph
# end
  opts.on("\n")
  opts.on("If no file is given, #{EXE_NAME} will write to standard out.")
end

option_parser.parse!

if options.key? :file
  path = File.expand_path(options[:file])
  dir = File.dirname(path)
  begin
    $stdout.reopen(path, 'w')
  rescue Errno::ENOENT
    abort "Can't write into #{dir}. Does it exist?"
  rescue Errno::EACCES
    abort File.writable?(dir) ? "Can't write #{path}. No permission." : "Can't write into #{dir}. No permission."
  rescue Errno::EISDIR
    abort 'Please pass in a file name, not a directory name.'
  rescue => e
    abort e.message
  end
end

# The graph hash needs to match the JSON object that StatusBoard requires
graph = {
  'graph' => {
    'title'                => options[:title],
    'type'                 => options[:graph],
    'refreshEveryNSeconds' => 1200,
    'datasequences'        => []
  }
}

uri = URI.parse('https://www.cloudflare.com/api_json.html')
request = Net::HTTP::Post.new(uri.path)

options[:sites].each_with_index do | site, key |
  request.set_form_data(
    'a' => 'stats',
    'tkn' => options[:token],
    'email' => options[:email],
    'z' => site[:url],
    'interval' => options[:interval]
  )
  httpreq = Net::HTTP.new(uri.host, uri.port)
  httpreq.use_ssl = true
  if RUBY_VERSION < '1.9'
    httpreq.verify_mode = OpenSSL::SSL::VERIFY_NONE
  end

  response = httpreq.start do |http|
    http.request(request)
  end

  # Got back something other than a 2xx response code
  unless response.is_a? Net::HTTPSuccess
    exit_json('Problems contacting the Cloudflare server', response.msg)
  end

  # Parse the JSON we got back from CloudFlare
  begin
    result = JSON.parse(response.body)
  rescue UnparserError => e
    exit_json('Unable to parse the Cloudflare JSON', e)
  end

  # Figure out what sort of error we got back
  errcodes = { 'E_UNAUTH' => "Couldn't authenticate: ",
               'err_ts' => 'Invalid interval: ',
               'err_zone_not_found' => 'Probable typo in site name: ',
               'E_MAXAPI' => 'CloudFlare wants you to not hit them as much: ',
               'E_INVLDINPUT' => 'Unknown problem. Congrats! This is weird: '
  }

  if result['result'] == 'error'
    if errcodes.key? result['err_code']
      exit_json(errcodes[result['err_code']] + result['msg'],
                result['err_code'])
    else
      exit_json("Unable to retrieve the Cloudflare JSON: #{result['msg']}",
                result['err_code'])
    end
  end

  totalhits = result['response']['result']['objs'][0]['requestsServed']['cloudflare']
  crawlerhits = result['response']['result']['objs'][0]['trafficBreakdown']['pageviews']['crawler']

  graph['graph']['datasequences'][key] = {
    'title'      => site[:title],
    'color'      => site[:color],
    'datapoints' => [{
      'title' => name_interval(options[:interval]),
      'value' => totalhits - crawlerhits
    }]
  }
  # graph['graph']['datasequences'][key]['datapoints'][0]['title'] = 'Nudiustertian'
  # graph['graph']['datasequences'][key]['datapoints'][1]['title'] = 'Yesterday'
end

puts graph.to_json
